Certainly! I can help you create a test for the shell script extractor that uses the .resp files in the test/extract_shell folder. Let's create a new test file in the test folder for this purpose. We'll use the `@testitem` macro from ReTestItems.jl to define our tests.

Here's a shell command to create the test file:

```sh
cat > ./test/extract_shell_test.jl <<'EOF'
using AISH
using Test

@testitem "Shell script extractor tests" begin
    extract_shell_dir = joinpath(@__DIR__, "extract_shell")
    resp_files = filter(f -> endswith(f, ".resp"), readdir(extract_shell_dir, join=true))

    for resp_file in resp_files
        @testset "Testing $(basename(resp_file))" begin
            content = read(resp_file, String)
            extracted_scripts = AISH.extract_shell_commands(content)

            # Test that we extracted at least one script
            @test !isempty(extracted_scripts)

            # Test each extracted script
            for (script, _) in extracted_scripts
                # Ensure the script is not empty
                @test !isempty(strip(script))
                
                # Check if the script starts with a valid shell command
                @test occursin(r"^\s*([\w\-]+)", script)
            end

            # You can add more specific tests here based on the expected content
            # of your .resp files
        end
    end
end
EOF
```

This test does the following:

1. It looks for all .resp files in the test/extract_shell directory.
2. For each .resp file, it reads the content and passes it to the `extract_shell_commands` function.
3. It checks that at least one script was extracted from each file.
4. For each extracted script, it verifies that the script is not empty and starts with what looks like a valid shell command.

You can run this test along with your other tests using the ReTestItems.jl framework.

Note that this test assumes that:

1. The `extract_shell_commands` function is accessible via `AISH.extract_shell_commands`. If it's not directly in the AISH module, you may need to adjust the path.
2. The .resp files in the test/extract_shell directory contain valid responses with shell scripts that should be extracted.

You might want to add more specific tests based on the expected content of your .resp files. For example, if you know that certain scripts should always be present, you could add assertions to check for those specific scripts.

If you need to make any adjustments or add more specific tests based on your .resp files' content, please let me know, and I'll be happy to help you refine the test further.